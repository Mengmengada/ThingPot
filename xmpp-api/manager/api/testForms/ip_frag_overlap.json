{
  "attackName": "IP Frag Overlap",
  "pic": "../assets/images/network-setup-badcksum.jpg",
  "Description": "The IP fragment overlapped exploit occurs when two fragments contained within the same IP datagram have offsets that indicate that they overlap each other in positioning within the datagram. This could mean that either fragment A is being completely overwritten by fragment B, or that fragment A is partially being overwritten by fragment B. Some operating systems do not properly handle fragments that overlap in this manner and may throw exceptions or behave in other undesirable ways upon receipt of overlapping fragments. This is the basis for the teardrop attack. Overlapping fragments may also be used in an attempt to bypass Intrusion Detection Systems. In this exploit, part of an attack is sent in fragments along with additional random data; future fragments may overwrite the random data with the remainder of the attack. If the completed datagram is not properly reassembled at the IDS, the attack will go undetected.",
  "setUpConfig": "The interfaces of the testers and the IP address might be changed. Router A Tester-1: Attacker, who will send the messages with bad checksum to Tester-2. Tester-2: Victim, who will receive the messages with bad checksum.",
  "schema": {
    "properties": {
      "ATTACK_NAME": {
        "type": "string",
        "description": "Attack name"
      },
      "ATTACK_CATEGORY": {
        "type": "string",
        "description": "Attack category"
      },
      "ATTACK_INTERFACE": {
        "type": "string",
        "description": "Attack interface"
      },
      "ATTACK_PACKETS": {
        "type": "string",
        "description": "Attack packets"
      },
      "TESTER_IP": {
        "type": "string",
        "description": "IP of the tester"
      },
      "VICTIM_IP": {
        "type": "string",
        "description": "IP of the victim"
      },
      "CHECKER_IP": {
        "type": "string",
        "description": "IP of the checker"
      },
      "MANAGER_IP": {
        "type": "string",
        "description": "IP of the manager"
      },
      "SNIFFER_IP": {
        "type": "string",
        "description": "IP of the sniffer"
      },
      "SNIFF_FILE_NAME": {
        "type": "string",
        "description": "Sniffer file name"
      },
      "SNIFF_INTERFACE": {
        "type": "string",
        "description": "Sniffer interface"
      },
      "SNIFF_FILTER": {
        "type": "string",
        "description": "Filter of the sniffer"
      },
      "SNIFF_COMMAND": {
        "type": "string",
        "description": "Sniffer command (scapy or tcpdump)"
      },
      "SNIFF_DURATION": {
        "type": "string",
        "description": "Sniffer duration"
      },
      "SNIFF_PACKETS": {
        "type": "string",
        "description": "Sniffer packets (how many it should sniff)"
      },
      "CHECK_FILE_NAME": {
        "type": "string",
        "description": "Checker file name"
      },
      "CHECK_COMMAND": {
        "type": "string",
        "description": "Checker command (ping)"
      },
      "CHECK_IP": {
        "type": "string",
        "description": "IP to send the check to"
      },
      "CHECK_PACKETS": {
        "type": "string",
        "description": "How many packets should the checker send"
      }
    },
    "required": [
      "email",
      "password",
      "rememberMe"
    ],
    "buttons": [
      {
        "id": "alert",
        "label": "Submit"
      }
    ]
  }
}